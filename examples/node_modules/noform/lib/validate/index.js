'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
function isEmpty(value) {
    return value === undefined || value === null || String(value) === '';
}
function configRules() {
    var local = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'zh_CN';

    return {
        zh_CN: {
            required: function required(label, message) {
                return {
                    validator: function validator(rule, value, callback) {
                        if (isEmpty(value)) {
                            callback([new Error(message || '必填')]);
                        } else {
                            callback([]);
                        }
                    }
                };
            },
            number: function number(label, message) {
                return {
                    validator: function validator(rule, value, callback) {
                        var errors = [];
                        var err = new Error(message || '只能输入数字');
                        if (isEmpty(value)) {
                            callback([]);
                        } else if (isNaN(Number(value))) {
                            // eslint-disable-line
                            errors.push(err);
                        } else if (typeof value !== 'string' && typeof value !== 'number') {
                            errors.push(err);
                        }
                        callback(errors);
                    }
                };
            },
            int: function int(label, message) {
                return {
                    validator: function validator(rule, value, callback) {
                        if (isEmpty(value)) {
                            callback([]);
                        } else if (!/^[1-9]\d*$/.test(value)) {
                            callback([new Error(message || '只能输入正整数')]);
                        } else {
                            callback([]);
                        }
                    }
                };
            },
            uint: function uint(label, message) {
                return {
                    validator: function validator(rule, value, callback) {
                        if (isEmpty(value)) {
                            callback([]);
                        } else if (!/^\d+$/.test(value)) {
                            callback([new Error(message || '只能输入非负整数')]);
                        } else {
                            callback([]);
                        }
                    }
                };
            },
            length: function length(_length, label, message) {
                return {
                    validator: function validator(rule, value, callback) {
                        if (isEmpty(value)) {
                            callback([]);
                        } else if (String(value).length !== _length) {
                            callback([new Error(message || '\u957F\u5EA6\u53EA\u80FD\u662F' + _length + '\u4E2A\u5B57\u7B26')]);
                        } else {
                            callback([]);
                        }
                    }
                };
            },
            minLength: function minLength(min, label, message) {
                return {
                    validator: function validator(rule, value, callback) {
                        if (isEmpty(value)) {
                            callback([]);
                        } else if (String(value).length < min) {
                            callback([new Error(message || '\u957F\u5EA6\u4E0D\u80FD\u5C11\u4E8E' + min + '\u4E2A\u5B57\u7B26')]);
                        } else {
                            callback([]);
                        }
                    }
                };
            },
            maxLength: function maxLength(max, label, message) {
                return {
                    validator: function validator(rule, value, callback) {
                        if (isEmpty(value)) {
                            callback([]);
                        } else if (String(value).length > max) {
                            callback([new Error(message || '\u957F\u5EA6\u4E0D\u80FD\u8D85\u8FC7' + max + '\u4E2A\u5B57\u7B26')]);
                        } else {
                            callback([]);
                        }
                    }
                };
            },
            eq: function eq(val, message) {
                if (!message) {
                    throw Error('应当为 eq 规则指定 message');
                }
                return {
                    validator: function validator(rule, value, callback, source) {
                        if (!(rule.field in source)) {
                            callback([]);
                        } else if (value !== val) {
                            callback([new Error(message)]);
                        } else {
                            callback([]);
                        }
                    }
                };
            },
            min: function min(_min, label, message) {
                return {
                    validator: function validator(rule, value, callback) {
                        if (isEmpty(value)) {
                            callback([]);
                        } else if (Number(value) < _min) {
                            callback([new Error(message || '\u4E0D\u80FD\u5C0F\u4E8E' + _min)]);
                        } else {
                            callback([]);
                        }
                    }
                };
            },
            max: function max(_max, label, message) {
                return {
                    validator: function validator(rule, value, callback) {
                        if (isEmpty(value)) {
                            callback([]);
                        } else if (Number(value) > _max) {
                            callback([new Error(message || '\u4E0D\u80FD\u5927\u4E8E' + _max)]);
                        } else {
                            callback([]);
                        }
                    }
                };
            },
            email: function email(label, message) {
                return {
                    type: 'email',
                    message: message || '邮箱格式不正确'
                };
            },
            url: function url(label, message) {
                return {
                    type: 'url',
                    message: message || '链接格式不正确,请以 http:// 或者 https:// 开头'
                };
            },
            phone: function phone(message) {
                return {
                    pattern: /^\d{6,}$/,
                    message: message || '错误的电话格式'
                };
            },
            equal: function equal(field, message) {
                if (!message) {
                    throw Error('应当为 equal 规则指定 message');
                }
                return {
                    validator: function validator(rule, value, callback, source) {
                        if (isEmpty(value)) {
                            callback([]);
                        } else if (value !== source[field]) {
                            callback([new Error(message)]);
                        } else {
                            callback([]);
                        }
                    }
                };
            },
            precision: function precision(_precision, label, message) {
                return {
                    validator: function validator(rule, value, callback) {
                        var regex = new RegExp('^(\\d+(\\.[\\d]{1,' + _precision + '})?)?$', 'g');
                        if (!regex.test(value)) {
                            callback([new Error(message || '\u5FC5\u987B\u7CBE\u786E\u5230' + _precision + '\u4F4D\u5C0F\u6570')]);
                        } else {
                            callback([]);
                        }
                    }
                };
            },
            alphabet: function alphabet(label, message) {
                return {
                    pattern: /^[a-z]*$/i,
                    message: message || '只允许输入英文字母'
                };
            },
            words: function words(label, message) {
                return {
                    pattern: /^[a-z0-9]*$/i,
                    message: message || '只允许输入英文字母和数字'
                };
            },
            ascii: function ascii(label, message) {
                return {
                    pattern: /^[\x00-\x7F]*$/, // eslint-disable-line
                    message: message || '只允许输入英文字母标点和数字'
                };
            },
            idCard: function idCard(label, message) {
                return {
                    pattern: /(^\d{15}$)|(^\d{17}([0-9]|X|x)$)/,
                    message: message || '请输入正确的身份证号'
                };
            },
            mobile: function mobile(label, message) {
                return {
                    pattern: /^1\d{10}$/,
                    message: message || '请输入正确的手机号码'
                };
            },
            hsCode: function hsCode(label, message) {
                return {
                    validator: function validator(rule, value, callback) {
                        if (isEmpty(value)) {
                            callback([]);
                        } else if (!/^\d{8}|\d{10}|\d{8}\.\d{2}$/.test(value)) {
                            callback([new Error(message || '请输入正确的HSCODE')]);
                        } else {
                            callback([]);
                        }
                    }
                };
            }
        }
    }[local];
}
exports.configRules = configRules;
exports['default'] = configRules();