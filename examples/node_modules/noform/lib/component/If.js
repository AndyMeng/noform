'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _class, _temp;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _static = require('../static');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

var If = (_temp = _class = function (_Component) {
    _inherits(If, _Component);

    function If(props, context) {
        _classCallCheck(this, If);

        var _this = _possibleConstructorReturn(this, _Component.call(this, props, context));

        _this.update = function (type) {
            if (_this.didMount && (type === 'value' || type === 'status')) {
                _this.forceUpdate();
            }
        };

        var when = props.when;
        var form = context.form;

        _this.form = form;
        _this.core = _this.form.addField({ when: when, name: props.name });
        _this.core.jsx = _this;
        return _this;
    }

    If.prototype.getChildContext = function getChildContext() {
        return { form: this.form, ifCore: this.core };
    };

    If.prototype.componentDidMount = function componentDidMount() {
        this.didMount = true;
        this.forceUpdate();
        this.core.on(_static.ANY_CHANGE, this.update);
    };

    If.prototype.componentWillUnmount = function componentWillUnmount() {
        this.didMount = false;
        this.core.removeListener(_static.ANY_CHANGE, this.update);
    };

    If.prototype.render = function render() {
        if (this.didMount && this.core.status === 'hidden') {
            return null;
        }

        var _props = this.props,
            children = _props.children,
            style = _props.style,
            className = _props.className,
            Com = _props.Com;
        // REACT15,REACT16

        if (_react2['default'].isValidElement(children)) {
            return _react2['default'].Children.only(children);
        }
        return _react2['default'].createElement(
            Com,
            { style: style, className: className },
            children
        );
    };

    return If;
}(_react.Component), _class.propTypes = {
    when: _propTypes2['default'].any,
    children: _propTypes2['default'].any,
    style: _propTypes2['default'].object,
    className: _propTypes2['default'].string,
    Com: _propTypes2['default'].oneOfType([_propTypes2['default'].string, _propTypes2['default'].func])
}, _class.defaultProps = {
    when: true,
    children: null,
    style: {},
    className: '',
    Com: 'span'
}, _class.contextTypes = {
    form: _propTypes2['default'].object,
    ifCore: _propTypes2['default'].object
}, _class.childContextTypes = {
    ifCore: _propTypes2['default'].object,
    form: _propTypes2['default'].object
}, _temp);
If.displayName = 'If';


If.displayName = 'If';

exports['default'] = If;
module.exports = exports['default'];