'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports['default'] = createRepeater;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _repeaterCore = require('./repeaterCore');

var _repeaterCore2 = _interopRequireDefault(_repeaterCore);

var _ = require('..');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

var noop = function noop() {};

function createRepeater(bindSource, source) {
    var _class, _temp, _initialiseProps;

    var _bindSource = bindSource(source),
        Container = _bindSource.Container,
        RowRender = _bindSource.RowRender;

    var Input = source.Input,
        _source$Dialog = source.Dialog,
        Dialog = _source$Dialog === undefined ? noop : _source$Dialog;


    return _temp = _class = function (_Component) {
        _inherits(OtRepeater, _Component);

        function OtRepeater(props, context) {
            _classCallCheck(this, OtRepeater);

            var _this = _possibleConstructorReturn(this, _Component.call(this, props, context));

            _initialiseProps.call(_this);

            var value = props.value,
                status = props.status,
                validateConfig = props.validateConfig;

            _this.value = value || [];
            _this.status = status;
            _this.validateConfig = validateConfig || {};
            _this.repeaterCore = new _repeaterCore2['default'](_this.value, _this.status, {
                validateConfig: _this.validateConfig
            });
            return _this;
        }

        OtRepeater.prototype.componentWillReceiveProps = function () {
            var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(nextProps) {
                var filter;
                return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                filter = this.props.filter;

                                // 没有过滤函数或者没有关键字

                                if (!(!filter || !this.key)) {
                                    _context.next = 4;
                                    break;
                                }

                                this.value = nextProps.value || [];
                                return _context.abrupt('return');

                            case 4:
                                if (!(nextProps.value !== this.props.value)) {
                                    _context.next = 10;
                                    break;
                                }

                                _context.next = 7;
                                return this.handleFilter(nextProps.value, this.key);

                            case 7:
                                this.value = _context.sent;


                                this.repeaterCore.updateValue(this.value);
                                this.forceUpdate();

                            case 10:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _callee, this);
            }));

            function componentWillReceiveProps(_x) {
                return _ref.apply(this, arguments);
            }

            return componentWillReceiveProps;
        }();

        OtRepeater.prototype.render = function render() {
            var repeaterCore = this.repeaterCore,
                handleSearch = this.handleSearch;
            var _props = this.props,
                _props$style = _props.style,
                style = _props$style === undefined ? {} : _props$style,
                className = _props.className,
                children = _props.children,
                filter = _props.filter;
            var formList = repeaterCore.formList;


            var itemsConfig = _react2['default'].Children.map(children, function (child) {
                return {
                    name: child.props.name,
                    label: child.props.label
                };
            }).filter(function (item) {
                return item.name;
            });

            var searchEle = filter ? _react2['default'].createElement(Input, { className: 'repeater-search', onChange: handleSearch }) : null;

            return _react2['default'].createElement(
                'div',
                null,
                _react2['default'].createElement(
                    Container,
                    {
                        searchEle: searchEle,
                        className: 'table-repeater-wrapper ' + (className || ''),
                        style: style,
                        jsxProps: this.props,
                        itemsConfig: itemsConfig,
                        repeaterCore: repeaterCore,
                        doAdd: this.doAdd,
                        doUpdate: this.doUpdate,
                        doDelete: this.doDelete,
                        doSave: this.doSave,
                        doCancel: this.doCancel,
                        doAddInline: this.doAddInline,
                        doUpdateInline: this.doUpdateInline
                    },
                    formList.map(function (core, idx) {
                        var val = core.getValues();
                        var itemProps = { idx: idx, val: val, core: core };
                        return _react2['default'].createElement(RowRender, _extends({ className: 'table-repeater-row' }, itemProps));
                    })
                )
            );
        };

        return OtRepeater;
    }(_react.Component), _class.propTypes = {
        value: _propTypes2['default'].array,
        onChange: _propTypes2['default'].func.isRequired,
        children: _propTypes2['default'].any
    }, _initialiseProps = function _initialiseProps() {
        var _this2 = this;

        this.onChange = function () {
            var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(val) {
                var value, thisVal, i, j, asyncHandler, handledValue;
                return regeneratorRuntime.wrap(function _callee2$(_context2) {
                    while (1) {
                        switch (_context2.prev = _context2.next) {
                            case 0:
                                // val是onChange后的值
                                // thisVal是onChange前的值，跟实际值合并之后存入value
                                // 主要是考虑存在filter的情况, thisVal是过滤之后的值
                                // this.props.value或者this.getValue()是过滤之前的值
                                // 这种情况主要的值还是this.props.value，所以这里需要进行处理
                                value = [];
                                thisVal = _this2.value;
                                // i是thisVal的游标
                                // j是val的游标

                                i = 0;
                                j = 0;

                                _this2.getValue().forEach(function (item) {
                                    // $idx是值在this.props.value中的下标
                                    if (i < thisVal.length && item.$idx < thisVal[i].$idx || i >= _this2.value.length) {
                                        // 没有修改的项
                                        value.push(item);
                                    } else if (i < thisVal.length && item.$idx === thisVal[i].$idx) {
                                        // 有修改或删除的项
                                        if (j < val.length && item.$idx === val[j].$idx) {
                                            // 项被更新
                                            value.push(val[j]);
                                            j += 1;
                                        }
                                        // 项被删除
                                        i += 1;
                                    }
                                });
                                // 新增的项
                                while (val.length > i) {
                                    value.push(val[i]);
                                    i += 1;
                                }

                                asyncHandler = _this2.props.asyncHandler;

                                if (!asyncHandler) {
                                    _context2.next = 14;
                                    break;
                                }

                                _context2.next = 10;
                                return asyncHandler(value);

                            case 10:
                                handledValue = _context2.sent;

                                _this2.props.onChange(handledValue);
                                _context2.next = 15;
                                break;

                            case 14:
                                _this2.props.onChange(value);

                            case 15:
                            case 'end':
                                return _context2.stop();
                        }
                    }
                }, _callee2, _this2);
            }));

            return function (_x2) {
                return _ref2.apply(this, arguments);
            };
        }();

        this.getValue = function () {
            return _this2.props.value || [];
        };

        this.handleFilter = function () {
            var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(value, key) {
                var filter, result;
                return regeneratorRuntime.wrap(function _callee3$(_context3) {
                    while (1) {
                        switch (_context3.prev = _context3.next) {
                            case 0:
                                filter = _this2.props.filter;

                                if (!filter) {
                                    _context3.next = 6;
                                    break;
                                }

                                _context3.next = 4;
                                return filter(value, key);

                            case 4:
                                result = _context3.sent;
                                return _context3.abrupt('return', result);

                            case 6:
                                return _context3.abrupt('return', value);

                            case 7:
                            case 'end':
                                return _context3.stop();
                        }
                    }
                }, _callee3, _this2);
            }));

            return function (_x3, _x4) {
                return _ref3.apply(this, arguments);
            };
        }();

        this.handleSearch = function () {
            var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(e) {
                var key, filter;
                return regeneratorRuntime.wrap(function _callee4$(_context4) {
                    while (1) {
                        switch (_context4.prev = _context4.next) {
                            case 0:
                                key = e.target ? e.target.value : e;
                                filter = _this2.props.filter;

                                if (key === undefined) {
                                    key = _this2.key || '';
                                } else {
                                    _this2.key = key;
                                }

                                // 使用过滤函数进行过滤, 正在创建或更新临时项时，不进行搜索

                                if (!(filter && key)) {
                                    _context4.next = 9;
                                    break;
                                }

                                _context4.next = 6;
                                return _this2.handleFilter(_this2.getValue(), key);

                            case 6:
                                _this2.value = _context4.sent;
                                _context4.next = 10;
                                break;

                            case 9:
                                _this2.value = _this2.getValue();

                            case 10:

                                _this2.repeaterCore.updateValue(_this2.value);
                                _this2.forceUpdate();

                            case 12:
                            case 'end':
                                return _context4.stop();
                        }
                    }
                }, _callee4, _this2);
            }));

            return function (_x5) {
                return _ref4.apply(this, arguments);
            };
        }();

        this.sync = function () {
            _this2.onChange(_this2.repeaterCore.getValues());
        };

        this.doSave = function () {
            var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(idx) {
                var hasError;
                return regeneratorRuntime.wrap(function _callee5$(_context5) {
                    while (1) {
                        switch (_context5.prev = _context5.next) {
                            case 0:
                                _context5.next = 2;
                                return _this2.repeaterCore.saveInline(idx);

                            case 2:
                                hasError = _context5.sent;

                                if (!hasError) {
                                    _context5.next = 5;
                                    break;
                                }

                                return _context5.abrupt('return');

                            case 5:

                                _this2.sync();
                                _this2.forceUpdate();

                            case 7:
                            case 'end':
                                return _context5.stop();
                        }
                    }
                }, _callee5, _this2);
            }));

            return function (_x6) {
                return _ref5.apply(this, arguments);
            };
        }();

        this.doCancel = function (idx) {
            _this2.repeaterCore.cancelInline(idx);
            _this2.sync();
            _this2.forceUpdate();
        };

        this.doAdd = function (core) {
            if (core instanceof _.FormCore) {
                _this2.repeaterCore.add(core);
            } else {
                _this2.repeaterCore.add(new _.FormCore({
                    values: core
                }));
            }

            _this2.sync();
        };

        this.doAddInline = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6() {
            var canSync;
            return regeneratorRuntime.wrap(function _callee6$(_context6) {
                while (1) {
                    switch (_context6.prev = _context6.next) {
                        case 0:
                            _context6.next = 2;
                            return _this2.repeaterCore.addInline();

                        case 2:
                            canSync = _context6.sent;

                            if (canSync) {
                                _this2.sync();
                            }
                            _this2.forceUpdate();

                        case 5:
                        case 'end':
                            return _context6.stop();
                    }
                }
            }, _callee6, _this2);
        }));

        this.doUpdateInline = function () {
            var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(idx) {
                return regeneratorRuntime.wrap(function _callee7$(_context7) {
                    while (1) {
                        switch (_context7.prev = _context7.next) {
                            case 0:
                                _context7.next = 2;
                                return _this2.repeaterCore.updateInline(idx);

                            case 2:
                                _this2.forceUpdate();

                            case 3:
                            case 'end':
                                return _context7.stop();
                        }
                    }
                }, _callee7, _this2);
            }));

            return function (_x7) {
                return _ref7.apply(this, arguments);
            };
        }();

        this.doUpdate = function (val, idx) {
            _this2.repeaterCore.update(val, idx);
            _this2.sync();
        };

        this.doDelete = function (idx) {
            _this2.repeaterCore.remove(idx);
            _this2.sync();
        };
    }, _temp;
}
module.exports = exports['default'];