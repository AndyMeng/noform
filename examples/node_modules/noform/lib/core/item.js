'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _asyncValidator = require('async-validator');

var _asyncValidator2 = _interopRequireDefault(_asyncValidator);

var _deepEqual = require('deep-equal');

var _deepEqual2 = _interopRequireDefault(_deepEqual);

var _static = require('../static');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function isFunction(func) {
    return typeof func === 'function';
}

var Item = function () {
    function Item(option) {
        var _this = this;

        _classCallCheck(this, Item);

        this.option = option;
        this.initWith(option);
        this.on(_static.ANY_CHANGE, function () {
            if (!_this.consistenting) {
                _this.selfConsistent();
            }
        });
    }

    Item.prototype.validate = function validate() {
        var _this2 = this;

        var validateConfig = this.validateConfig;

        if (typeof this.option.func_validateConfig === 'function') {
            validateConfig = this.option.func_validateConfig(validateConfig, this.form);
        }

        if (!validateConfig) {
            return Promise.resolve(null);
        }
        this.validator = new _asyncValidator2['default'](_defineProperty({}, this.name, validateConfig));
        return new Promise(function (resolve) {
            _this2.validator.validate(_defineProperty({}, _this2.name, _this2.get('value')), function (errors) {
                if (errors) {
                    resolve(errors[0].message);
                } else {
                    resolve(null);
                }
            });
        });
    };

    Item.prototype.updateField = function updateField(option) {
        this.initWith(_extends({}, this, option));
    };

    Item.prototype.initWith = function initWith(option) {
        var form = option.form,
            on = option.on,
            emit = option.emit,
            removeListener = option.removeListener;

        this.form = form;
        this.on = on;
        this.emit = emit;
        this.removeListener = removeListener;

        var interceptor = option.interceptor,
            name = option.name,
            value = option.value,
            props = option.props,
            error = option.error,
            status = option.status,
            _option$when = option.when,
            when = _option$when === undefined ? null : _option$when,
            validateConfig = option.validateConfig;


        this.name = name;
        this.value = value;
        this.props = props;
        this.when = when;
        this.error = error;
        this.status = status;
        this.validateConfig = validateConfig;
        this.interceptor = interceptor;

        var jsx_status = option.jsx_status,
            _option$func_props = option.func_props,
            func_props = _option$func_props === undefined ? null : _option$func_props,
            _option$func_status = option.func_status,
            func_status = _option$func_status === undefined ? null : _option$func_status,
            _option$func_validate = option.func_validateConfig,
            func_validateConfig = _option$func_validate === undefined ? null : _option$func_validate;

        this.func_props = func_props;
        this.func_status = func_status;

        this.jsx_status = jsx_status;
        this.func_validateConfig = func_validateConfig;

        this.selfConsistent();
    };

    // 自我调整


    Item.prototype.selfConsistent = function () {
        var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
            var when, form, func_props, func_status, jsx_status, value, statusResult, statusResultVal, whenResult, whenResultFlag, props, propsResult, tmpPropResult;
            return regeneratorRuntime.wrap(function _callee$(_context) {
                while (1) {
                    switch (_context.prev = _context.next) {
                        case 0:
                            this.consistenting = true; // debounce
                            when = this.when, form = this.form, func_props = this.func_props, func_status = this.func_status, jsx_status = this.jsx_status;
                            value = form.getAll('value');

                            // [status]静态变量可以直接await, 相当于new Promise().resolve(静态变量)

                            statusResult = this.form.globalStatus;

                            if (!jsx_status) {
                                _context.next = 12;
                                break;
                            }

                            if (isFunction(func_status)) {
                                // 可能为promise
                                statusResult = func_status(value, form);
                            } else if (_static.STATUS_ENUMS.has(this.jsx_status)) {
                                // 写死静态状态
                                statusResult = this.jsx_status;
                            }

                            statusResultVal = statusResult;

                            if (!(statusResult instanceof Promise)) {
                                _context.next = 11;
                                break;
                            }

                            _context.next = 10;
                            return statusResult;

                        case 10:
                            statusResultVal = _context.sent;

                        case 11:

                            if (statusResultVal && _static.STATUS_ENUMS.has(statusResultVal)) {
                                statusResult = statusResultVal;
                                if (when === null) this.set('status', statusResult);
                            }

                        case 12:

                            // [when]同上，直接await处理
                            whenResult = when;

                            if (isFunction(when)) whenResult = when(value, form); // 可能为promise

                            whenResultFlag = whenResult;

                            if (!(whenResult instanceof Promise)) {
                                _context.next = 19;
                                break;
                            }

                            _context.next = 18;
                            return whenResult;

                        case 18:
                            whenResultFlag = _context.sent;

                        case 19:

                            if (whenResultFlag === true) {
                                this.set('status', statusResult);
                            } else if (whenResultFlag === false) {
                                this.set('status', 'hidden');
                            }

                            // [props]同上，直接await处理

                            if (!isFunction(func_props)) {
                                _context.next = 29;
                                break;
                            }

                            props = form.getAll('props', this.name);
                            propsResult = func_props(props, form);
                            tmpPropResult = propsResult;

                            if (!(propsResult instanceof Promise)) {
                                _context.next = 28;
                                break;
                            }

                            _context.next = 27;
                            return propsResult;

                        case 27:
                            tmpPropResult = _context.sent;

                        case 28:

                            this.set('props', tmpPropResult);

                        case 29:

                            this.consistenting = false;

                        case 30:
                        case 'end':
                            return _context.stop();
                    }
                }
            }, _callee, this);
        }));

        function selfConsistent() {
            return _ref2.apply(this, arguments);
        }

        return selfConsistent;
    }();

    Item.prototype.setValidateConfig = function setValidateConfig(config) {
        this.validateConfig = config;
    };

    Item.prototype.get = function get(type) {
        return this.form[type][this.name];
    };

    Item.prototype.set = function () {
        var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(type, value) {
            var ftValue, ftResult, ftValTmp;
            return regeneratorRuntime.wrap(function _callee2$(_context2) {
                while (1) {
                    switch (_context2.prev = _context2.next) {
                        case 0:
                            ftValue = value;

                            // interceptor一般为function, 在类型为value时处理

                            if (!(type === 'value' && typeof this.interceptor === 'function')) {
                                _context2.next = 11;
                                break;
                            }

                            ftResult = this.interceptor(value);

                            if (!(ftResult instanceof Promise)) {
                                _context2.next = 10;
                                break;
                            }

                            _context2.next = 6;
                            return ftResult;

                        case 6:
                            ftValTmp = _context2.sent;

                            if (ftValTmp !== undefined) ftValue = ftValTmp;
                            _context2.next = 11;
                            break;

                        case 10:
                            if (ftResult !== undefined) {
                                ftValue = ftResult;
                            }

                        case 11:
                            if (!(0, _deepEqual2['default'])(this[type], ftValue)) {
                                _context2.next = 13;
                                break;
                            }

                            return _context2.abrupt('return', false);

                        case 13:

                            this.form[type][this.name] = ftValue;
                            this[type] = ftValue;

                            this.emit(_static.BASIC_EVENT[type], this.name, ftValue);
                            this.emit(_static.ANY_CHANGE, type, this.name, ftValue);
                            return _context2.abrupt('return', true);

                        case 18:
                        case 'end':
                            return _context2.stop();
                    }
                }
            }, _callee2, this);
        }));

        function set(_x, _x2) {
            return _ref3.apply(this, arguments);
        }

        return set;
    }();

    return Item;
}();

exports['default'] = Item;
module.exports = exports['default'];