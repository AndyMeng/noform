'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var IS_REACT_GREATER_FITHTEEN = parseInt(_react2['default'].version) > 15;
var Next = void 0;

function formatValue(value) {
    if (value === null || value === undefined) return '';
    return value; // 0 或 []直接返回
}

function formatArray(value) {
    if (value === null || value === undefined) return [];
    return value;
}

function formatDate(value) {
    if (value === null || value === undefined) return '';
    if (Next && Next.moment) {
        return Next.moment(value).format('YYYY-MM-DD');
    }
    return value;
}

function formatBoolValue(value) {
    if (value === null || value === undefined) return false;
    if (value === true || value === 'true') {
        return true;
    } else if (value === false || value === 'false') {
        return false;
    }
    return false;
}

function renderValue(value) {
    if (value === null || value === undefined) return null; // 空值直接返回
    if (Array.isArray(value)) {
        // 数组需要判断版本号返回
        var arrValue = value.map(function (valItem) {
            return _react2['default'].createElement(
                'span',
                { className: 'multi-value-item' },
                valItem
            );
        });

        return IS_REACT_GREATER_FITHTEEN ? arrValue : _react2['default'].createElement(
            'span',
            { className: 'multi-value-item-wrapper' },
            arrValue
        );
    }

    return IS_REACT_GREATER_FITHTEEN ? value : _react2['default'].createElement(
        'span',
        { className: 'multi-value-item' },
        value
    );
}

function renderOption() {
    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    // 处理
    var value = formatValue(props.value); // 格式化值
    var arrValue = [].concat(value); // 处理多选, 如checkbox
    if (Array.isArray(props.dataSource)) {
        // dataSource模式
        var hitLabel = [];
        props.dataSource.forEach(function (item) {
            if (arrValue.indexOf(item.value) !== -1) {
                hitLabel.push(item.label);
            }
        });

        return renderValue(hitLabel);
    } else if (Array.isArray(props.children)) {
        // children模式
        var _hitLabel = [];
        props.children.forEach(function (item) {
            if (item.props && item.props.children && arrValue.indexOf(item.props.value) !== -1) {
                _hitLabel.push(item.props.children);
            }
        });

        return renderValue(_hitLabel);
    }
    return null;
}

var fetchFileUrl = '';
var defaultFileUploadProps = {
    prefix: 'next-',
    type: 'file',
    fileList: [],
    language: 'zh-cn',
    uploadBtnText: '',
    fetchFileUrl: fetchFileUrl,
    className: '',
    limit: 10,
    formatter: function formatter(res) {
        // 函数里面根据当前服务器返回的响应数据
        // 重新拼装符合组件要求的数据格式
        return {
            code: res.code,
            imgURL: fetchFileUrl + res.fs_url,
            imgUrl: fetchFileUrl + res.fs_url,
            // downloadURL 是提交给后端，后端可能获取这个值，用于兼容
            downloadURL: fetchFileUrl + res.fs_url,
            // downloadUrl 是针对于上传成功以后的下载链接
            downloadUrl: fetchFileUrl + res.fs_url,
            fileURL: fetchFileUrl + res.fs_url,
            size: res.size,
            fileMd5: res.hash,
            fs_url: res.fs_url
        };
    },
    beforeUpload: function beforeUpload() {},
    onChange: function onChange() {},
    onSuccess: function onSuccess() {}
};

function Input(props) {
    var value = props.value || '';
    // TODO: 需要确认Textarea
    if (props.status === 'preview') return renderValue(value); // 处理预览态
    return _react2['default'].createElement(Next.Input, _extends({}, props, { value: value }));
}

function Select(props) {
    var _props$className = props.className,
        className = _props$className === undefined ? '' : _props$className;

    var value = formatValue(props.value); // 格式化值

    // if(props.status === 'preview') return renderOption(props);
    if (props.status === 'preview') return _react2['default'].createElement(Next.Select, _extends({}, props, { disabled: true, className: (className || '') + ' next-preview-select', value: value }));
    return _react2['default'].createElement(Next.Select, _extends({}, props, { value: value }));
}

function CheckboxGroup(props) {
    var value = formatArray(props.value); // 格式化值

    if (props.status === 'preview') return renderOption(props);
    return _react2['default'].createElement(Next.Checkbox.Group, _extends({}, props, { value: value }));
}

function RadioGroup(props) {
    var value = formatValue(props.value); // 格式化值

    if (props.status === 'preview') return renderOption(props);
    return _react2['default'].createElement(Next.Radio.Group, _extends({}, props, { value: value }));
}

function Checkbox(props) {
    var checked = formatBoolValue(props.value);

    if (props.status === 'preview') {
        if (props.children) {
            // 存在label
            return checked ? renderValue(props.children) : null;
        } // 不存在
        console.warn('label必须写在Checkbox内，如需编写外部label, 请使用suffix、prefix等熟悉'); // 给出警告
        return null;
    }

    return _react2['default'].createElement(Next.Checkbox, _extends({}, props, { checked: checked }));
}

function Radio(props) {
    var checked = formatBoolValue(props.value);

    if (props.status === 'preview') {
        if (props.children) {
            // 存在label
            return checked ? renderValue(props.children) : null;
        } // 不存在
        console.warn('label必须写在Radio内，如需编写外部label, 请使用suffix、prefix等熟悉'); // 给出警告
        return null;
    }

    return _react2['default'].createElement(Next.Radio, _extends({}, props, { checked: checked }));
}

function Switch(props) {
    var checked = formatBoolValue(props.value);

    if (props.status === 'preview') {
        if (props.checkedChildren || props.unCheckedChildren) {
            // 存在label
            var checkedStr = checked ? props.checkedChildren : props.unCheckedChildren;
            return renderValue(checkedStr);
        } // 不存在
        return renderValue('' + checked);
    }

    return _react2['default'].createElement(Next.Switch, _extends({}, props, { checked: checked }));
}

function Range(props) {
    var value = formatValue(props.value);

    if (props.status === 'preview') {
        return _react2['default'].createElement(Next.Range, _extends({}, props, { disabled: true, value: value }));
    }

    return _react2['default'].createElement(Next.Range, _extends({}, props, { value: value }));
}

function DatePicker(props) {
    var _props$className2 = props.className,
        className = _props$className2 === undefined ? '' : _props$className2;

    var value = formatValue(props.value);

    if (props.status === 'preview') {
        var placeholderClearer = {
            datePlaceholder: '',
            monthPlaceholder: '',
            yearPlaceholder: '',
            rangeStartPlaceholder: '',
            rangeEndPlaceholder: ''
        };
        return _react2['default'].createElement(Next.DatePicker, _extends({}, props, { value: value, locale: placeholderClearer, disabled: true, className: (className || '') + ' next-preview-datepicker' }));
    }

    var onChange = function onChange(_, formatDate) {
        props.onChange && props.onChange(formatDate);
    };

    return _react2['default'].createElement(Next.DatePicker, _extends({}, props, { value: value, onChange: onChange }));
}

function TimePicker(props) {
    var _props$className3 = props.className,
        className = _props$className3 === undefined ? '' : _props$className3;

    var value = formatValue(props.value);

    if (props.status === 'preview') {
        var placeholderClearer = {
            placeholder: ''
        };
        return _react2['default'].createElement(Next.TimePicker, _extends({}, props, { value: value, locale: placeholderClearer, disabled: true, className: (className || '') + ' next-preview-datepicker' }));
    }

    var onChange = function onChange(_, formatDate) {
        props.onChange && props.onChange(formatDate);
    };

    return _react2['default'].createElement(Next.TimePicker, _extends({}, props, { value: value, onChange: onChange }));
}

function NumberPicker(props) {
    var value = formatValue(props.value);

    if (props.status === 'preview') return renderValue(value); // 处理预览态

    return _react2['default'].createElement(Next.NumberPicker, _extends({}, props, { value: value }));
}

function Rating(props) {
    var value = formatValue(props.value);

    if (props.status === 'preview') {
        return _react2['default'].createElement(Next.Rating, _extends({}, props, { disabled: true, value: value }));
    }

    return _react2['default'].createElement(Next.Rating, _extends({}, props, { value: value }));
}

function Search(props) {
    var value = formatValue(props.value);

    if (props.status === 'preview') return renderValue(value); // 处理预览态

    return _react2['default'].createElement(Next.Search, _extends({}, props, { value: value }));
}

function CascaderSelect(props) {
    var _props$className4 = props.className,
        className = _props$className4 === undefined ? '' : _props$className4;

    var value = formatValue(props.value);
    if (props.status === 'preview') {
        return _react2['default'].createElement(Next.CascaderSelect, _extends({}, props, { className: (className || '') + ' next-preview-select', disabled: true, value: value }));
    }
    return _react2['default'].createElement(Next.CascaderSelect, _extends({}, props, { value: value }));
}

function TreeSelect(props) {
    var _props$className5 = props.className,
        className = _props$className5 === undefined ? '' : _props$className5;

    var value = formatValue(props.value);
    if (props.status === 'preview') {
        return _react2['default'].createElement(Next.TreeSelect, _extends({}, props, { className: (className || '') + ' next-preview-select', disabled: true, value: value }));
    }
    return _react2['default'].createElement(Next.TreeSelect, _extends({}, props, { value: value }));
}

function Upload(props) {
    var value = formatArray(props.value);

    var name = props.name,
        others = _objectWithoutProperties(props, ['name']);

    var _props$className6 = props.className,
        className = _props$className6 === undefined ? '' : _props$className6;


    if (props.status === 'preview') {
        return _react2['default'].createElement(Next.Upload, _extends({}, defaultFileUploadProps, others, { onChange: onChange, className: (className || '') + ' next-preview-upload', disabled: true, fileList: value }));
    }

    var onChange = function onChange(origin) {
        var _ref = origin || {},
            _ref$fileList = _ref.fileList,
            fileList = _ref$fileList === undefined ? [] : _ref$fileList;

        props.onChange && props.onChange(fileList);
    };

    return _react2['default'].createElement(Next.Upload, _extends({}, defaultFileUploadProps, others, { onChange: onChange, fileList: value }));
}

function ImageUpload(props) {
    var value = formatArray(props.value);

    var name = props.name,
        others = _objectWithoutProperties(props, ['name']);

    var _props$className7 = props.className,
        className = _props$className7 === undefined ? '' : _props$className7;


    if (props.status === 'preview') {
        return _react2['default'].createElement(Next.Upload.ImageUpload, _extends({}, others, { onChange: onChange, className: (className || '') + ' next-preview-upload', disabled: true, fileList: value }));
    }

    var onChange = function onChange(origin) {
        var _ref2 = origin || {},
            _ref2$fileList = _ref2.fileList,
            fileList = _ref2$fileList === undefined ? [] : _ref2$fileList;

        props.onChange && props.onChange(fileList);
    };

    return _react2['default'].createElement(Next.Upload.ImageUpload, _extends({}, others, { onChange: onChange, fileList: value }));
}

function AutoComplete(props) {
    return _react2['default'].createElement(Next.Select.AutoComplete, props);
}

function wrapper(NextSource) {
    Next = NextSource;

    if (Next.Select && Next.Select.Option) Select.Option = Next.Select.Option;
    Checkbox.Group = CheckboxGroup;
    Radio.Group = RadioGroup;
    if (Next.TreeSelect) TreeSelect.Node = Next.TreeSelect.Node;
    Upload.ImageUpload = ImageUpload;
    Select.AutoComplete = AutoComplete;

    return _extends({}, NextSource, {
        Input: Input,
        Select: Select,
        Checkbox: Checkbox,
        Radio: Radio,
        Switch: Switch,
        Range: Range,
        DatePicker: DatePicker,
        TimePicker: TimePicker,
        NumberPicker: NumberPicker,
        Rating: Rating,
        Search: Search,
        CascaderSelect: CascaderSelect,
        TreeSelect: TreeSelect,
        Upload: Upload
    });
}

exports['default'] = wrapper;
module.exports = exports['default'];