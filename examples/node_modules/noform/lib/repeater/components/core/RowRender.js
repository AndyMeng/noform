'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _class, _temp;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

var propInterface = {
    itemsConfig: _propTypes2['default'].array,
    core: _propTypes2['default'].object,
    repeaterCore: _propTypes2['default'].object,
    jsxProps: _propTypes2['default'].object,
    doAdd: _propTypes2['default'].func,
    doUpdate: _propTypes2['default'].func,
    doDelete: _propTypes2['default'].func,
    doSave: _propTypes2['default'].func,
    doCancel: _propTypes2['default'].func,
    doAddInline: _propTypes2['default'].func,
    doUpdateInline: _propTypes2['default'].func
};

var RowRender = (_temp = _class = function (_Component) {
    _inherits(RowRender, _Component);

    function RowRender(props, context) {
        _classCallCheck(this, RowRender);

        var _this = _possibleConstructorReturn(this, _Component.call(this, props, context));

        _this.getCore = function () {
            return _this.props.core;
        };

        _this.getIdx = function () {
            return _this.props.idx;
        };

        _this.itemsConfig = context.itemsConfig;
        _this.repeaterCore = context.repeaterCore;
        _this.doAdd = context.doAdd;
        _this.doUpdate = context.doUpdate;
        _this.doDelete = context.doDelete;
        _this.doSave = context.doSave;
        _this.doCancel = context.doCancel;
        _this.doAddInline = context.doAddInline;
        _this.doUpdateInline = context.doUpdateInline;
        _this.jsxProps = context.jsxProps;

        _this.core = props.core;
        _this.idx = props.idx;
        _this.val = props.val;
        return _this;
    }

    RowRender.prototype.getChildContext = function getChildContext() {
        return {
            jsxProps: this.jsxProps,
            itemsConfig: this.itemsConfig,
            getCore: this.getCore,
            getIdx: this.getIdx,
            doAdd: this.doAdd,
            doUpdate: this.doUpdate,
            doDelete: this.doDelete,
            doSave: this.doSave,
            doCancel: this.doCancel,
            doAddInline: this.doAddInline,
            doUpdateInline: this.doUpdateInline
        };
    };

    RowRender.prototype.render = function render() {
        var render = this.props.render;

        return render(this);
    };

    return RowRender;
}(_react.Component), _class.contextTypes = _extends({}, propInterface), _class.childContextTypes = _extends({}, propInterface, {
    getIdx: _propTypes2['default'].func,
    getCore: _propTypes2['default'].func
}), _temp);
RowRender.displayName = 'RowRender';


RowRender.propTypes = {
    val: _propTypes2['default'].object,
    core: _propTypes2['default'].object,
    props: _propTypes2['default'].object,
    jsxProps: _propTypes2['default'].object,
    idx: _propTypes2['default'].number,
    render: _propTypes2['default'].func
};

exports['default'] = RowRender;
module.exports = exports['default'];