'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var IS_REACT_GREATER_FITHTEEN = parseInt(_react2['default'].version, 10) > 15;
var Antd = void 0;

var prefix = 'ant';
var noop = function noop(v) {
    return v;
};
function formatValue(value) {
    if (value === null || value === undefined) return '';
    return value; // 0 或 []直接返回
}

function formatArray(value) {
    if (value === null || value === undefined) return [];
    return value;
}

function formatBoolValue(value) {
    if (value === null || value === undefined) return false;
    if (value === true || value === 'true') {
        return true;
    } else if (value === false || value === 'false') {
        return false;
    }
    return false;
}

function getValueProps(props) {
    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    var valueProps = {};
    var _opts$keyname = opts.keyname,
        keyname = _opts$keyname === undefined ? 'value' : _opts$keyname,
        _opts$defaultValue = opts.defaultValue,
        defaultValue = _opts$defaultValue === undefined ? '' : _opts$defaultValue,
        _opts$format = opts.format,
        format = _opts$format === undefined ? noop : _opts$format;

    if ('value' in props) {
        valueProps[keyname] = format(props.value || defaultValue);
    }

    return valueProps;
}

function renderValue(value) {
    if (value === null || value === undefined) return null; // 空值直接返回
    if (Array.isArray(value)) {
        // 数组需要判断版本号返回
        var arrValue = value.map(function (valItem) {
            return _react2['default'].createElement(
                'span',
                { className: 'multi-value-item' },
                valItem
            );
        });

        return _react2['default'].createElement(
            'div',
            { className: 'multi-value-item-wrapper' },
            arrValue
        );
    }

    return IS_REACT_GREATER_FITHTEEN ? value : _react2['default'].createElement(
        'span',
        { className: 'multi-value-item' },
        value
    );
}

function renderOption() {
    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    // 处理
    var value = formatValue(props.value); // 格式化值
    var arrValue = [].concat(value); // 处理多选, 如checkbox
    if (Array.isArray(props.dataSource) || Array.isArray(props.options)) {
        // dataSource模式
        var dataSource = props.dataSource || props.options;
        var hitLabel = [];
        dataSource.forEach(function (item) {
            if (arrValue.indexOf(item.value) !== -1) {
                hitLabel.push(item.label);
            }
        });

        return renderValue(hitLabel);
    } else if (Array.isArray(props.children)) {
        // children模式
        var _hitLabel = [];
        props.children.forEach(function (item) {
            if (item.props && item.props.children && arrValue.indexOf(item.props.value) !== -1) {
                _hitLabel.push(item.props.children);
            }
        });

        return renderValue(_hitLabel);
    }
    return null;
}

var defaultFileUploadProps = {
    fileList: [],
    beforeUpload: function beforeUpload() {},
    onChange: function onChange() {},
    onSuccess: function onSuccess() {}
};
function Input(props) {
    var error = props.error,
        status = props.status,
        value = props.value;

    var valueProps = getValueProps(props);

    if (props.status === 'preview') return renderValue(formatValue(value)); // 处理预览态
    return _react2['default'].createElement(Antd.Input, _extends({}, props, valueProps));
}

function Textarea(props) {
    var error = props.error,
        status = props.status,
        value = props.value;

    var valueProps = getValueProps(props);

    if (props.status === 'preview') return renderValue(formatValue(value)); // 处理预览态
    return _react2['default'].createElement(Antd.Input.TextArea, _extends({}, props, valueProps));
}

function Select(props) {
    var _props$className = props.className,
        className = _props$className === undefined ? '' : _props$className,
        value = props.value;

    var options = props.options,
        others = _objectWithoutProperties(props, ['options']);

    var opts = {};
    if (options && Array.isArray(options) && !props.children) {
        opts.children = options.map(function (item) {
            var label = item.label,
                value = item.value;

            return _react2['default'].createElement(
                Antd.Select.Option,
                { value: value },
                label
            );
        });
    }

    var valueProps = getValueProps(props);

    if (props.status === 'preview') return _react2['default'].createElement(Antd.Select, _extends({ placeholder: '' }, props, { disabled: true, className: (className || '') + ' ' + prefix + '-preview-select', value: formatValue(value) }));
    return _react2['default'].createElement(Antd.Select, _extends({}, others, opts, valueProps));
}

function CheckboxGroup(props) {
    var valueProps = getValueProps(props);

    if (props.status === 'preview') return renderOption(props);
    return _react2['default'].createElement(Antd.Checkbox.Group, _extends({}, props, valueProps));
}

function RadioGroup(props) {
    var valueProps = getValueProps(props);

    if (props.status === 'preview') return renderOption(props);
    return _react2['default'].createElement(Antd.Radio.Group, _extends({}, props, valueProps));
}

function Checkbox(props) {
    var valueProps = getValueProps(props, {
        format: formatBoolValue,
        keyname: 'checked'
    });

    if (props.status === 'preview') {
        var checked = formatBoolValue(props.value);
        if (props.children) {
            // 存在label
            return checked ? renderValue(props.children) : null;
        } // 不存在
        console.warn('label必须写在Checkbox内，如需编写外部label, 请使用suffix、prefix等熟悉'); // 给出警告
        return null;
    }

    var beforeChange = function beforeChange(e) {
        var checkedVal = e.target.checked;
        var onChange = props.onChange;

        onChange && onChange(checkedVal);
    };

    return _react2['default'].createElement(Antd.Checkbox, _extends({}, props, valueProps, { onChange: beforeChange }));
}

function Radio(props) {
    var valueProps = getValueProps(props, {
        format: formatBoolValue,
        keyname: 'checked'
    });

    if (props.status === 'preview') {
        var checked = formatBoolValue(props.value);
        if (props.children) {
            // 存在label
            return checked ? renderValue(props.children) : null;
        } // 不存在
        console.warn('label必须写在Radio内，如需编写外部label, 请使用suffix、prefix等熟悉'); // 给出警告
        return null;
    }

    var beforeChange = function beforeChange(e) {
        var checkedVal = e.target.checked;
        var onChange = props.onChange;

        onChange && onChange(checkedVal);
    };

    return _react2['default'].createElement(Antd.Radio, _extends({}, props, valueProps, { onChange: beforeChange }));
}

function Switch(props) {
    var valueProps = getValueProps(props, {
        format: formatBoolValue,
        keyname: 'checked'
    });

    if (props.status === 'preview') {
        var checked = formatBoolValue(props.value);
        if (props.checkedChildren || props.unCheckedChildren) {
            // 存在label
            var checkedStr = checked ? props.checkedChildren : props.unCheckedChildren;
            return renderValue(checkedStr);
        } // 不存在
        return renderValue('' + checked);
    }

    return _react2['default'].createElement(Antd.Switch, _extends({}, props, valueProps));
}

function Slider(props) {
    var _props$className2 = props.className,
        className = _props$className2 === undefined ? '' : _props$className2,
        value = props.value;

    var valueProps = getValueProps(props);

    if (props.status === 'preview') {
        return _react2['default'].createElement(Antd.Slider, _extends({ className: (className || '') + ' ' + prefix + '-preview-slider' }, props, { disabled: true, value: formatValue(value) }));
    }

    return _react2['default'].createElement(Antd.Slider, _extends({}, props, valueProps));
}

function DatePicker(props) {
    var _props$className3 = props.className,
        className = _props$className3 === undefined ? '' : _props$className3,
        value = props.value;

    var valueProps = getValueProps(props);

    if (props.status === 'preview') {
        var placeholderClearer = {
            datePlaceholder: '',
            monthPlaceholder: '',
            yearPlaceholder: '',
            rangeStartPlaceholder: '',
            rangeEndPlaceholder: ''
        };

        return _react2['default'].createElement(Antd.DatePicker, _extends({ placeholder: '' }, props, { value: value, locale: placeholderClearer, disabled: true, className: (className || '') + ' ' + prefix + '-preview-datepicker' }));
    }

    var onChange = function onChange(momentVal, formatDate) {
        var onChange = props.onChange;

        onChange && onChange(momentVal, { escape: true });
    };

    return _react2['default'].createElement(Antd.DatePicker, _extends({}, props, valueProps, { onChange: onChange }));
}

function TimePicker(props) {
    var _props$className4 = props.className,
        className = _props$className4 === undefined ? '' : _props$className4,
        value = props.value;

    var valueProps = getValueProps(props);

    if (props.status === 'preview') {
        var placeholderClearer = {
            placeholder: ''
        };
        return _react2['default'].createElement(Antd.TimePicker, _extends({ placeholder: '' }, props, { value: value, locale: placeholderClearer, disabled: true, className: (className || '') + ' ' + prefix + '-preview-datepicker' }));
    }

    var onChange = function onChange(momentVal, formatDate) {
        var onChange = props.onChange;

        onChange && onChange(momentVal, { escape: true });
    };

    return _react2['default'].createElement(Antd.TimePicker, _extends({}, props, valueProps, { onChange: onChange }));
}

function InputNumber(props) {
    var value = props.value;

    var valueProps = getValueProps(props);

    if (props.status === 'preview') return renderValue(value); // 处理预览态

    return _react2['default'].createElement(Antd.InputNumber, _extends({}, props, valueProps));
}

function Rate(props) {
    var value = props.value;

    var valueProps = getValueProps(props);

    if (props.status === 'preview') {
        return _react2['default'].createElement(Antd.Rate, _extends({}, props, { disabled: true, value: formatValue(value) }));
    }

    return _react2['default'].createElement(Antd.Rate, _extends({}, props, valueProps));
}

function Cascader(props) {
    var _props$className5 = props.className,
        className = _props$className5 === undefined ? '' : _props$className5,
        value = props.value;

    var valueProps = getValueProps(props);
    if (props.status === 'preview') {
        return _react2['default'].createElement(Antd.Cascader, _extends({ placeholder: '' }, props, { className: (className || '') + ' ' + prefix + '-preview-select', disabled: true, value: formatValue(value) }));
    }
    return _react2['default'].createElement(Antd.Cascader, _extends({}, props, valueProps));
}

function TreeSelect(props) {
    var _props$className6 = props.className,
        className = _props$className6 === undefined ? '' : _props$className6,
        value = props.value;

    var valueProps = getValueProps(props);
    if (props.status === 'preview') {
        return _react2['default'].createElement(Antd.TreeSelect, _extends({ placeholder: '' }, props, { className: (className || '') + ' ' + prefix + '-preview-select', disabled: true, value: formatValue(value) }));
    }
    return _react2['default'].createElement(Antd.TreeSelect, _extends({}, props, valueProps));
}

function Upload(props) {
    var value = formatArray(props.value);

    var name = props.name,
        others = _objectWithoutProperties(props, ['name']);

    var _props$className7 = props.className,
        className = _props$className7 === undefined ? '' : _props$className7;


    if (props.status === 'preview') {
        return _react2['default'].createElement(Antd.Upload, _extends({}, defaultFileUploadProps, others, { onChange: onChange, className: (className || '') + ' ' + prefix + '-preview-upload', disabled: true, fileList: value }));
    }

    var onChange = function onChange(origin) {
        var _ref = origin || {},
            _ref$fileList = _ref.fileList,
            fileList = _ref$fileList === undefined ? [] : _ref$fileList;

        props.onChange && props.onChange(fileList);
    };

    return _react2['default'].createElement(Antd.Upload, _extends({}, defaultFileUploadProps, others, { onChange: onChange, fileList: value }));
}

function AutoComplete(props) {
    var _props$className8 = props.className,
        className = _props$className8 === undefined ? '' : _props$className8,
        value = props.value;

    var options = props.options,
        others = _objectWithoutProperties(props, ['options']);

    var valueProps = getValueProps(props);

    var opts = {};
    if (options && Array.isArray(options) && !props.children) {
        opts.children = options.map(function (item) {
            var label = item.label,
                value = item.value;

            return _react2['default'].createElement(
                Antd.AutoComplete.Option,
                { key: value },
                label
            );
        });
    }

    if (props.status === 'preview') return _react2['default'].createElement(Antd.AutoComplete, _extends({ placeholder: '' }, props, { disabled: true, className: (className || '') + ' ' + prefix + '-preview-select', value: formatValue(value) }));
    return _react2['default'].createElement(Antd.AutoComplete, _extends({}, others, opts, valueProps));
}

function Mention(props) {
    var _props$className9 = props.className,
        className = _props$className9 === undefined ? '' : _props$className9;

    var value = props.value,
        options = props.options,
        others = _objectWithoutProperties(props, ['value', 'options']);

    var _Antd$Mention = Antd.Mention,
        toContentState = _Antd$Mention.toContentState,
        toString = _Antd$Mention.toString;

    var valueProps = getValueProps(props, {
        format: function format(v) {
            return typeof v === 'string' ? toContentState(v || '') : v;
        }
    });

    var opts = {};
    if (Array.isArray(options) && !('suggestions' in props)) {
        opts.suggestions = options;
    }

    var onChange = function onChange(val) {
        var onChange = props.onChange;

        onChange && onChange(val, { escape: true });
    };

    if (props.status === 'preview') return _react2['default'].createElement(Antd.Mention, _extends({ placeholder: '' }, opts, props, { disabled: true, className: (className || '') + ' ' + prefix + '-preview-select', value: formatValue(value) }));
    return _react2['default'].createElement(Antd.Mention, _extends({}, others, opts, valueProps, { onChange: onChange }));
}

function wrapper(AntdSource) {
    Antd = AntdSource;

    if (Antd.Select && Antd.Select.Option) Select.Option = Antd.Select.Option;
    Checkbox.Group = CheckboxGroup;
    Radio.Group = RadioGroup;
    if (Antd.TreeSelect) TreeSelect.Node = Antd.TreeSelect.Node;
    Input.Textarea = Textarea;

    return _extends({}, AntdSource, {
        Input: Input,
        Select: Select,
        Checkbox: Checkbox,
        Radio: Radio,
        AutoComplete: AutoComplete,
        Switch: Switch,
        Slider: Slider,
        DatePicker: DatePicker,
        TimePicker: TimePicker,
        InputNumber: InputNumber,
        Rate: Rate,
        Mention: Mention,
        Cascader: Cascader,
        TreeSelect: TreeSelect,
        Upload: Upload
    });
}

exports['default'] = wrapper;
module.exports = exports['default'];