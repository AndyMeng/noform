'use strict';

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports['default'] = undefined;

var _class2, _temp, _initialiseProps, _class3, _temp2;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var noop = function noop() {};
var isPromise = function isPromise(content) {
    return Promise.resolve(content) === content;
};

var DialogForm = function DialogForm(options, getDialogInstance) {
    var _this = this;

    _classCallCheck(this, DialogForm);

    this.hide = function () {
        var dialogInstance = _this.getDialogInstance();
        dialogInstance.hide();
    };

    this.handleOk = function () {
        var _options = _this.options,
            _options$onOk = _options.onOk,
            onOk = _options$onOk === undefined ? noop : _options$onOk,
            enableValidate = _options.enableValidate;

        var values = {};
        if (_this.dialogCore) values = _this.dialogCore.getValues();

        var params = [values, _this.hide, _this.dialogCore];
        if (enableValidate && _this.dialogCore) {
            return _this.dialogCore.validate(function (err) {
                if (!err) return onOk.apply(undefined, params);
                return null;
            });
        }
        return onOk.apply(undefined, params);
    };

    this.renderFooter = function (Button) {
        var _options2 = _this.options,
            footer = _options2.footer,
            _options2$okText = _options2.okText,
            okText = _options2$okText === undefined ? 'OK' : _options2$okText,
            btnLoadingPropsName = _options2.btnLoadingPropsName;


        var footerElement = null;
        if (footer) {
            footerElement = footer(_this.hide);
        } else {
            footerElement = _react2['default'].createElement(
                'div',
                { key: 'footer', className: 'ant-custom-btns' },
                _react2['default'].createElement(
                    ActionButton,
                    { btnLoadingPropsName: btnLoadingPropsName, btnOrigin: Button, type: 'primary', onClick: _this.handleOk },
                    okText
                )
            );
        }

        return footerElement;
    };

    this.renderContent = function () {
        var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(Button) {
            var content, formInstance, formInstanceProps, onMount, children, hijackCore, footer, mixFooterContent, modalContent;
            return regeneratorRuntime.wrap(function _callee$(_context) {
                while (1) {
                    switch (_context.prev = _context.next) {
                        case 0:
                            content = _this.options.content;
                            formInstance = null;

                            if (!(typeof content === 'function')) {
                                _context.next = 6;
                                break;
                            }

                            formInstance = content();
                            _context.next = 13;
                            break;

                        case 6:
                            if (!isPromise(content)) {
                                _context.next = 12;
                                break;
                            }

                            _context.next = 9;
                            return content;

                        case 9:
                            formInstance = _context.sent;
                            _context.next = 13;
                            break;

                        case 12:
                            formInstance = content;

                        case 13:
                            formInstanceProps = formInstance.props;
                            onMount = formInstanceProps.onMount, children = formInstanceProps.children;

                            hijackCore = function hijackCore(core) {
                                _this.dialogCore = core;
                                if (onMount) {
                                    onMount(core);
                                }
                            };

                            footer = _this.renderFooter(Button);
                            mixFooterContent = [].concat(children, footer);
                            modalContent = _react2['default'].cloneElement(formInstance, _extends({}, formInstanceProps, {
                                onMount: hijackCore,
                                children: mixFooterContent
                            }));
                            return _context.abrupt('return', modalContent);

                        case 20:
                        case 'end':
                            return _context.stop();
                    }
                }
            }, _callee, _this);
        }));

        return function (_x) {
            return _ref.apply(this, arguments);
        };
    }();

    this.options = options;
    this.dialogCore = null;
    this.getDialogInstance = getDialogInstance;
};

var DialogFormFactory = (_temp = _class2 = function DialogFormFactory(_ref2) {
    var Dialog = _ref2.Dialog,
        Button = _ref2.Button,
        compatiMap = _ref2.compatiMap;

    _classCallCheck(this, DialogFormFactory);

    _initialiseProps.call(this);

    this.Dialog = Dialog;
    this.Button = Button;
    this.compatiMap = compatiMap;
}, _initialiseProps = function _initialiseProps() {
    var _this2 = this;

    this.show = function () {
        var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(options) {
            var Dialog, Button, compatiMap, title, className, width, others, dialogInstance, btnLoadingPropsName, dialogForm, content, entryProps;
            return regeneratorRuntime.wrap(function _callee2$(_context2) {
                while (1) {
                    switch (_context2.prev = _context2.next) {
                        case 0:
                            Dialog = _this2.Dialog, Button = _this2.Button, compatiMap = _this2.compatiMap;

                            if (!(!Dialog || !Button)) {
                                _context2.next = 3;
                                break;
                            }

                            throw Error('DialogForm initialize failed, make sure you have passed antd components');

                        case 3:
                            title = options.title, className = options.className, width = options.width, others = _objectWithoutProperties(options, ['title', 'className', 'width']);
                            dialogInstance = null;

                            // 按钮loading属性

                            btnLoadingPropsName = compatiMap.btnLoadingProps || 'loading';
                            dialogForm = new DialogForm(_extends({}, options, {
                                btnLoadingPropsName: btnLoadingPropsName
                            }), function () {
                                return dialogInstance;
                            });
                            _context2.next = 9;
                            return dialogForm.renderContent(Button);

                        case 9:
                            content = _context2.sent;


                            // 入口属性
                            entryProps = compatiMap.show(_extends({}, options, {
                                title: title,
                                content: content
                            }));


                            dialogInstance = Dialog.show(_extends({}, others, entryProps));

                            dialogInstance = compatiMap.dialogInstance(dialogInstance);
                            return _context2.abrupt('return', dialogInstance);

                        case 14:
                        case 'end':
                            return _context2.stop();
                    }
                }
            }, _callee2, _this2);
        }));

        return function (_x2) {
            return _ref3.apply(this, arguments);
        };
    }();
}, _temp);
exports['default'] = DialogFormFactory;
var ActionButton = (_temp2 = _class3 = function (_React$Component) {
    _inherits(ActionButton, _React$Component);

    function ActionButton(props, context) {
        _classCallCheck(this, ActionButton);

        var _this3 = _possibleConstructorReturn(this, _React$Component.call(this, props, context));

        _this3.enableLoading = function () {
            var onLoading = _this3.props.onLoading;

            if (onLoading) {
                onLoading();
            }
            _this3.setState({ isLoading: true });
        };

        _this3.disableLoading = function () {
            var offLoading = _this3.props.offLoading;

            if (offLoading) {
                offLoading();
            }
            _this3.setState({ isLoading: false });
        };

        _this3.handleAction = function () {
            var onClick = _this3.props.onClick;

            if (typeof onClick === 'function') {
                _this3.enableLoading();
                var actionResult = onClick();
                if (isPromise(actionResult)) {
                    actionResult.then(_this3.disableLoading, _this3.disableLoading)['catch'](_this3.disableLoading);
                } else {
                    _this3.disableLoading();
                }
            }
        };

        _this3.state = {
            isLoading: false
        };
        return _this3;
    }

    ActionButton.prototype.render = function render() {
        var _props = this.props,
            onClick = _props.onClick,
            _props$btnLoadingProp = _props.btnLoadingPropsName,
            btnLoadingPropsName = _props$btnLoadingProp === undefined ? 'loading' : _props$btnLoadingProp,
            btnOrigin = _props.btnOrigin,
            others = _objectWithoutProperties(_props, ['onClick', 'btnLoadingPropsName', 'btnOrigin']);

        var Button = btnOrigin;
        var isLoading = this.state.isLoading;

        var btnLoadingProps = _defineProperty({}, btnLoadingPropsName, isLoading);
        return _react2['default'].createElement(Button, _extends({ onClick: this.handleAction }, others, btnLoadingProps));
    };

    return ActionButton;
}(_react2['default'].Component), _class3.propTypes = {
    onLoading: _propTypes2['default'].func,
    offLoading: _propTypes2['default'].func,
    onClick: _propTypes2['default'].func,
    btnLoadingPropsName: _propTypes2['default'].string,
    btnOrigin: _propTypes2['default'].oneOf([_propTypes2['default'].func, _propTypes2['default'].string])
}, _temp2);
ActionButton.displayName = 'ActionButton';
module.exports = exports['default'];