'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _class, _temp, _initialiseProps;

var _form = require('../core/form');

var _form2 = _interopRequireDefault(_form);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var RepeaterCore = (_temp = _class = function RepeaterCore(valueArr, status, props) {
    var _this = this;

    _classCallCheck(this, RepeaterCore);

    _initialiseProps.call(this);

    this.formList = [];

    this.status = status || 'preview';
    this.formProps = props || {};
    if (Array.isArray(valueArr)) {
        this.formList = valueArr.map(function (values) {
            var formValues = values || {};
            var formProps = props || {};
            return new FromCore(_extends({}, formProps, {
                values: formValues,
                globalStatus: _this.status
            }));
        });
    }
}

// 更新构建属性


// 增加临时编辑项


// 激活已有项为临时编辑项


// 保存临时编辑项


// 撤销临时编辑项


// 增


// 删


// 改


// 更新value


// 查
, _initialiseProps = function _initialiseProps() {
    var _this2 = this;

    this.updateStatus = function (status) {
        _this2.status = status;
    };

    this.notify = function () {};

    this.updateProps = function (props) {
        var formProps = props || {};
        _this2.formProps = formProps;
    };

    this.setEditWhenFocus = function () {
        _this2.formList.forEach(function (core) {
            if (core.$focus) {
                core.setGlobalStatus('edit');
            } else {
                core.setGlobalStatus('preview');
            }
        });
    };

    this.autoSaveInline = function () {
        var canSync = false;
        _this2.formList = _this2.formList.map(function (core) {
            if (core.$focus) {
                canSync = true;
                delete core.$focus;
                delete core.$backup;
            }
            return core;
        });

        return canSync;
    };

    this.addInline = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
        var canSync, hasError, tmp;
        return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
                switch (_context.prev = _context.next) {
                    case 0:
                        canSync = false;
                        _context.next = 3;
                        return _this2.hasValidateError();

                    case 3:
                        hasError = _context.sent;

                        if (!hasError) {
                            _context.next = 6;
                            break;
                        }

                        return _context.abrupt('return', canSync);

                    case 6:

                        canSync = _this2.autoSaveInline();
                        tmp = _this2.generateCore();

                        tmp.$focus = true;
                        _this2.formList.push(tmp);
                        _this2.setEditWhenFocus();
                        return _context.abrupt('return', canSync);

                    case 12:
                    case 'end':
                        return _context.stop();
                }
            }
        }, _callee, _this2);
    }));
    this.hasValidateError = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
        var validateArr;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
                switch (_context2.prev = _context2.next) {
                    case 0:
                        _context2.next = 2;
                        return Promise.all(_this2.formList.map(function (core) {
                            return core.validate();
                        }));

                    case 2:
                        validateArr = _context2.sent;

                        validateArr = validateArr.filter(function (errors) {
                            var hasError = false;
                            if (errors) {
                                Object.keys(errors).forEach(function (errkey) {
                                    if (errors[errkey]) {
                                        hasError = true;
                                    }
                                });
                            }

                            return hasError;
                        });

                        return _context2.abrupt('return', validateArr.length > 0);

                    case 5:
                    case 'end':
                        return _context2.stop();
                }
            }
        }, _callee2, _this2);
    }));

    this.updateInline = function () {
        var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(index) {
            var hasError;
            return regeneratorRuntime.wrap(function _callee3$(_context3) {
                while (1) {
                    switch (_context3.prev = _context3.next) {
                        case 0:
                            _context3.next = 2;
                            return _this2.hasValidateError();

                        case 2:
                            hasError = _context3.sent;

                            if (!hasError) {
                                _context3.next = 5;
                                break;
                            }

                            return _context3.abrupt('return');

                        case 5:

                            _this2.formList = _this2.formList.map(function (core, idx) {
                                if (idx === index) {
                                    core.$focus = true;
                                    core.$backup = core.getValues();
                                    return core;
                                }
                                if (core.$focus) delete core.$focus;
                                return core;
                            });

                            _this2.setEditWhenFocus();

                        case 7:
                        case 'end':
                            return _context3.stop();
                    }
                }
            }, _callee3, _this2);
        }));

        return function (_x) {
            return _ref3.apply(this, arguments);
        };
    }();

    this.saveInline = function () {
        var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(index) {
            var hasError;
            return regeneratorRuntime.wrap(function _callee4$(_context4) {
                while (1) {
                    switch (_context4.prev = _context4.next) {
                        case 0:
                            _context4.next = 2;
                            return _this2.hasValidateError();

                        case 2:
                            hasError = _context4.sent;

                            if (!hasError) {
                                _context4.next = 5;
                                break;
                            }

                            return _context4.abrupt('return', hasError);

                        case 5:

                            _this2.formList = _this2.formList.map(function (core, idx) {
                                if (idx === index) {
                                    delete core.$focus;
                                    delete core.$backup;
                                }

                                return core;
                            });

                            _this2.setEditWhenFocus();
                            return _context4.abrupt('return', hasError);

                        case 8:
                        case 'end':
                            return _context4.stop();
                    }
                }
            }, _callee4, _this2);
        }));

        return function (_x2) {
            return _ref4.apply(this, arguments);
        };
    }();

    this.cancelInline = function (index) {
        var list = [];
        _this2.formList.forEach(function (core, idx) {
            if (index === idx) {
                delete core.$focus;
                if (core.$backup) {
                    // 已有项
                    core.setValueSilent(core.$backup);
                    delete core.$backup;
                    list.push(core);
                } else {
                    // do nothing...
                }
            } else {
                list.push(core);
            }
        });

        _this2.setEditWhenFocus();
        _this2.formList = list;
    };

    this.generateCore = function (values) {
        var formValues = values || {};
        return new _form2['default'](_extends({}, _this2.formProps, {
            values: formValues,
            globalStatus: _this2.status
        }));
    };

    this.add = function (core) {
        _this2.formList.push(core);
    };

    this.remove = function (index) {
        _this2.formList = _this2.formList.filter(function (_, idx) {
            return idx !== index;
        });
    };

    this.update = function (values, index) {
        _this2.formList = _this2.formList.map(function (core, idx) {
            if (idx === index) {
                core.setValueSilent(values);
                return core;
            }
            return core;
        });
    };

    this.updateValue = function (valueArr) {
        if (Array.isArray(valueArr)) {
            _this2.formList = valueArr.map(function (values) {
                var formValues = values || {};
                return _this2.generateCore(formValues);
            });
        }
    };

    this.getValues = function () {
        var values = [];
        _this2.formList.forEach(function (core) {
            var currentVal = core.getValues();
            if (core.$focus) {
                if (core.$backup) {
                    values.push(core.$backup);
                }
            } else {
                values.push(currentVal);
            }
        });
        return values;
    };
}, _temp);
exports['default'] = RepeaterCore;
module.exports = exports['default'];