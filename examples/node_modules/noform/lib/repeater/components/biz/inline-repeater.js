'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports['default'] = bind;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _Form = require('../../../component/Form');

var _Form2 = _interopRequireDefault(_Form);

var _TableCom = require('../core/TableCom');

var _TableCom2 = _interopRequireDefault(_TableCom);

var _Container = require('../core/Container');

var _Container2 = _interopRequireDefault(_Container);

var _RowRender = require('../core/RowRender');

var _RowRender2 = _interopRequireDefault(_RowRender);

var _ActionButton = require('../core/ActionButton');

var _ActionButton2 = _interopRequireDefault(_ActionButton);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function bind(source) {
    var ActionButton = (0, _ActionButton2['default'])(source);

    function Container(props) {
        return _react2['default'].createElement(_Container2['default'], _extends({}, props, {
            render: function render(context) {
                var itemsConfig = context.itemsConfig;
                var _context$props = context.props,
                    searchEle = _context$props.searchEle,
                    className = _context$props.className,
                    jsxProps = _context$props.jsxProps,
                    children = _context$props.children;
                var status = jsxProps.status,
                    _jsxProps$addText = jsxProps.addText,
                    addText = _jsxProps$addText === undefined ? 'add' : _jsxProps$addText;


                var editable = status === 'edit';

                var header = itemsConfig.map(function (conf, key) {
                    return _react2['default'].createElement(
                        'th',
                        { className: 'next-table-header-node', key: key },
                        _react2['default'].createElement(
                            'div',
                            { className: 'next-table-cell-wrapper' },
                            ' ',
                            conf.label,
                            ' '
                        )
                    );
                });

                if (editable) {
                    header.push(_react2['default'].createElement(
                        'th',
                        { className: 'next-table-header-node', key: 'last' },
                        _react2['default'].createElement(
                            'div',
                            { className: 'next-table-cell-wrapper' },
                            ' \u64CD\u4F5C '
                        )
                    ));
                }

                return _react2['default'].createElement(
                    'div',
                    { className: className },
                    searchEle,
                    editable ? _react2['default'].createElement(ActionButton, { type: 'addInline', addText: addText }) : null,
                    _react2['default'].createElement(
                        _TableCom2['default'],
                        { header: header },
                        children
                    )
                );
            }
        }));
    }

    function RowRender(props) {
        return _react2['default'].createElement(_RowRender2['default'], _extends({}, props, {
            render: function render(context) {
                var _context$props2 = context.props,
                    val = _context$props2.val,
                    idx = _context$props2.idx,
                    core = _context$props2.core,
                    className = _context$props2.className;
                var itemsConfig = context.itemsConfig,
                    jsxProps = context.jsxProps;
                var status = jsxProps.status,
                    _jsxProps$hasDelete = jsxProps.hasDelete,
                    hasDelete = _jsxProps$hasDelete === undefined ? true : _jsxProps$hasDelete,
                    _jsxProps$hasUpdate = jsxProps.hasUpdate,
                    hasUpdate = _jsxProps$hasUpdate === undefined ? true : _jsxProps$hasUpdate,
                    _jsxProps$updateText = jsxProps.updateText,
                    updateText = _jsxProps$updateText === undefined ? 'update' : _jsxProps$updateText,
                    _jsxProps$deleteText = jsxProps.deleteText,
                    deleteText = _jsxProps$deleteText === undefined ? 'delete' : _jsxProps$deleteText,
                    _jsxProps$saveText = jsxProps.saveText,
                    saveText = _jsxProps$saveText === undefined ? 'save' : _jsxProps$saveText,
                    _jsxProps$cancelText = jsxProps.cancelText,
                    cancelText = _jsxProps$cancelText === undefined ? 'cancel' : _jsxProps$cancelText,
                    children = jsxProps.children;


                var focusMode = core.$focus;
                var editable = status === 'edit';

                var updateBtn = !focusMode && hasUpdate ? _react2['default'].createElement(ActionButton, { type: 'updateInline', updateText: updateText }) : null;
                var deleteBtn = !focusMode && hasDelete ? _react2['default'].createElement(ActionButton, { type: 'delete', deleteText: deleteText }) : null;

                var saveBtn = focusMode ? _react2['default'].createElement(ActionButton, { type: 'save', saveText: saveText }) : null;
                var cancelBtn = focusMode ? _react2['default'].createElement(ActionButton, { type: 'cancel', cancelText: cancelText }) : null;

                var listItems = null;
                var childMap = {};
                children.forEach(function (childitem) {
                    var _childitem$props = childitem.props,
                        label = _childitem$props.label,
                        name = _childitem$props.name;

                    childMap['' + label + name] = _react2['default'].cloneElement(childitem, { label: undefined });
                });

                listItems = itemsConfig.map(function (conf, key) {
                    var innerItem = null;
                    if (focusMode) {
                        innerItem = _react2['default'].createElement(
                            'div',
                            { className: 'next-table-cell-wrapper inline-repeater-focus' },
                            childMap['' + conf.label + conf.name]
                        );
                    } else {
                        innerItem = _react2['default'].createElement(
                            'div',
                            { className: 'next-table-cell-wrapper' },
                            val[conf.name]
                        );
                    }
                    return _react2['default'].createElement(
                        'td',
                        { key: key },
                        innerItem
                    );
                });

                return _react2['default'].createElement(
                    _Form2['default'],
                    { core: core, className: className, key: idx },
                    listItems,
                    _react2['default'].createElement(
                        'td',
                        null,
                        editable ? _react2['default'].createElement(
                            'div',
                            { className: 'next-table-cell-wrapper' },
                            saveBtn,
                            cancelBtn,
                            updateBtn,
                            deleteBtn
                        ) : null
                    )
                );
            }
        }));
    }

    return {
        Container: Container,
        RowRender: RowRender,
        inline: true
    };
}
module.exports = exports['default'];