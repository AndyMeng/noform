'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _events = require('events');

var _events2 = _interopRequireDefault(_events);

var _static = require('../static');

var _item = require('./item');

var _item2 = _interopRequireDefault(_item);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// 工具方法
var isObject = function isObject(obj) {
    return Object.prototype.toString.call(obj) === '[object Object]';
};
var genName = function genName() {
    return '__anonymouse__' + Math.random().toString(36);
};
var noop = function noop() {};

var Form = function () {
    function Form() {
        var _this = this;

        var option = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        _classCallCheck(this, Form);

        this.handleChange = function (name) {
            if (!_this.silent && !_this.hasEmitted) {
                // 变化的keys必须为数组
                _this.onChange(_this.settingBatchKeys || [name], _this.value, _this);
                _this.emit(_static.CHANGE, _this.value, _this.settingBatchKeys || [name]);
            }

            if (_this.silent) _this.hasEmitted = false;
            if (_this.isSetting) _this.hasEmitted = true;
        };

        this.handleErrors = function (errs) {
            var errors = {};
            var retErr = {};
            var hasError = false;

            _this.children.forEach(function (child, idx) {
                if (errs[idx] && child.status !== 'hidden') {
                    hasError = true;
                    retErr[child.name] = errs[idx];
                }
                if (child.status === 'hidden') {
                    errors[child.name] = null;
                } else {
                    errors[child.name] = errs[idx] || null;
                }
            });

            _this.setError(errors);
            if (!hasError) {
                return null;
            }
            return retErr;
        };

        var _ref = option || {},
            validateConfig = _ref.validateConfig,
            onChange = _ref.onChange,
            value = _ref.value,
            values = _ref.values,
            status = _ref.status,
            globalStatus = _ref.globalStatus,
            interceptor = _ref.interceptor;

        this.onChange = onChange || noop;
        this.children = [];
        this.childrenMap = {};

        // TODO: 依赖status作为属性的例子需要改掉
        this.globalStatus = globalStatus || 'edit';

        // 基础属性
        this.value = values || value || {};
        this.status = isObject(status) ? status : {}; // 避免jsx传入单值status
        this.props = {};
        this.error = {};

        this.interceptor = interceptor || {}; // 拦截器
        this.validateConfig = validateConfig;

        this.emitter = new _events2['default']();
        this.emitter.setMaxListeners(1000); // TODO: 最大值

        Array.from(['Value', 'Status', 'Error', 'Props']).forEach(function (name) {
            // 多字段
            _this['set' + name] = _this.set.bind(_this, name.toLowerCase());
            _this['get' + name] = _this.get.bind(_this, name.toLowerCase());

            // 单字段
            _this['setItem' + name] = _this.setItem.bind(_this, name.toLowerCase());
            _this['getItem' + name] = _this.get.bind(_this, name.toLowerCase());
        });

        // 别名
        this.setValues = this.setValue;
        this.getValues = this.getValue;

        // 处理item的setValue事件
        this.on(_static.VALUE_CHANGE, this.handleChange);
    }

    // 上报change事件到JSX


    // 事件处理相关
    Form.prototype.on = function on() {
        var _emitter;

        (_emitter = this.emitter).on.apply(_emitter, arguments);
    };

    Form.prototype.emit = function emit() {
        var _emitter2;

        (_emitter2 = this.emitter).emit.apply(_emitter2, arguments);
    };

    Form.prototype.removeListener = function removeListener() {
        var _emitter3;

        (_emitter3 = this.emitter).removeListener.apply(_emitter3, arguments);
    };

    // 检验单项


    Form.prototype.validateItem = function () {
        var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(name) {
            var cb = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function (x) {
                return x;
            };
            var arrName, validators, errs, errors, retErr, hasError;
            return regeneratorRuntime.wrap(function _callee$(_context) {
                while (1) {
                    switch (_context.prev = _context.next) {
                        case 0:
                            arrName = [].concat(name);
                            validators = [];

                            this.children.forEach(function (child) {
                                if (arrName.indexOf(child.name) !== -1) {
                                    validators.push(child.validate());
                                }
                            });

                            _context.next = 5;
                            return Promise.all(validators);

                        case 5:
                            errs = _context.sent;
                            errors = {};
                            retErr = {};
                            hasError = false;


                            this.children.forEach(function (child) {
                                if (child.name && arrName.indexOf(child.name) !== -1) {
                                    var idx = arrName.indexOf(child.name);

                                    if (errs[idx] && child.status !== 'hidden') {
                                        hasError = true;
                                        retErr[child.name] = errs[idx];
                                    }
                                    if (child.status === 'hidden') {
                                        errors[child.name] = null;
                                    } else {
                                        errors[child.name] = errs[idx] || null;
                                    }
                                }
                            });

                            this.setError(errors);

                            if (hasError) {
                                _context.next = 13;
                                break;
                            }

                            return _context.abrupt('return', cb(null));

                        case 13:
                            return _context.abrupt('return', cb(retErr));

                        case 14:
                        case 'end':
                            return _context.stop();
                    }
                }
            }, _callee, this);
        }));

        function validateItem(_x2) {
            return _ref2.apply(this, arguments);
        }

        return validateItem;
    }();

    // 表单校验,返回错误对象


    Form.prototype.validate = function validate() {
        var cb = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : function (x) {
            return x;
        };

        var validators = [];
        var hasPromise = false;
        this.children.forEach(function (child) {
            var result = child.validate();
            if (result instanceof Promise) {
                hasPromise = true;
            }
            validators.push(result);
        });
        if (hasPromise) {
            return Promise.all(validators).then(this.handleErrors).then(cb);
        }
        return cb(this.handleErrors(validators));
    };

    // 静默设值
    Form.prototype.setValueSilent = function setValueSilent() {
        this.silent = true;

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        this.set.apply(this, ['value'].concat(args));
        this.silent = false;
    };

    // 设置单子段


    Form.prototype.setItem = function setItem(type, name, value) {
        this.isSetting = true;
        var formatValue = value;

        // 处理props的情况，merge合并
        if (type === 'props') {
            var lastProps = this[type][name] || {};
            formatValue = value || {};
            formatValue = _extends({}, lastProps, formatValue);
        }

        this[type][name] = formatValue;
        var targetItem = this.children.find(function (child) {
            return child.name === name;
        });
        if (targetItem) targetItem.set(type, formatValue);

        this.isSetting = false;
        this.hasEmitted = false;
    };

    // 重置value


    Form.prototype.reset = function reset() {
        var emptyValue = {};
        Object.keys(this.value).forEach(function (key) {
            emptyValue[key] = null;
        });

        this.setValue(emptyValue);
    };

    // 设置多字段


    Form.prototype.set = function set(type, value) {
        var _this2 = this;

        // 设置单字段
        if (arguments.length === 3) {
            this.setItem(type, value, arguments[2]);
            return;
        }

        if (type === 'status' && typeof value === 'string') {
            this.setGlobalStatus(value);
            return;
        }

        this.isSetting = true;

        // 异常情况
        if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) !== 'object') {
            this.isSetting = false;
            this.hasEmitted = false;
            return;
        }

        // 处理props的情况，merge合并
        var formatValue = value;
        if (type === 'props') {
            formatValue = value || {};
            Object.keys(formatValue).forEach(function (propsKey) {
                var targetProps = formatValue[propsKey] || {};
                var lastProps = _this2[type][propsKey] || {};

                formatValue[propsKey] = _extends({}, lastProps, targetProps);
            });
        }

        this[type] = _extends({}, this[type], formatValue);

        if (type === 'value') {
            this.settingBatchKeys = Object.keys(value); // 批量变化的值
        }
        this.children.forEach(function (child) {
            child.set(type, _this2[type][child.name]);
        });

        this.isSetting = false;
        this.hasEmitted = false;
        this.settingBatchKeys = null;
    };

    // 全局状态


    Form.prototype.setGlobalStatus = function setGlobalStatus(targetStatus) {
        this.globalStatus = targetStatus;
        var status = {};
        this.children.forEach(function (child) {
            status[child.name] = targetStatus;
        });

        return this.setStatus(status);
    };

    Form.prototype.getGlobalStatus = function getGlobalStatus() {
        return this.globalStatus;
    };

    // 获取多值


    Form.prototype.getAll = function getAll(type, name) {
        if (name) {
            return this[type][name];
        }
        return this[type];
    };

    // 获取值


    Form.prototype.get = function get(type, name) {
        if (name) {
            return this[type][name];
        }
        var ret = this.filter(this.getAll(type));
        if (type === 'error') {
            var hasError = false;
            Object.keys(ret).forEach(function (key) {
                if (ret[key]) {
                    hasError = true;
                }
            });

            if (!hasError) ret = null;
        }
        return ret;
    };

    Form.prototype.filter = function filter(obj) {
        var _this3 = this;

        if (!isObject(obj)) {
            return obj;
        }

        var ret = {};
        Object.keys(obj).forEach(function (key) {
            if (key.indexOf('__anonymouse__') !== 0 && _this3.get('status', key) !== 'hidden') {
                ret[key] = _this3.filter(obj[key]);
            }
        });

        return ret;
    };

    Form.prototype.addField = function addField(fieldProps) {
        var _this4 = this;

        // 处理非数组情况，考虑null,undefined
        if (!Array.isArray(fieldProps)) {
            // eslint-disable-next-line
            fieldProps = [fieldProps];
        }

        var ret = fieldProps.map(function (option) {
            var mrOption = _extends({}, option);
            var value = option.value,
                name = option.name,
                status = option.status,
                error = option.error,
                props = option.props,
                func_status = option.func_status;


            if (_this4.childrenMap[name]) {
                return _this4.childrenMap[name];
            }

            // name特殊处理
            if (typeof name === 'number') mrOption.name = '' + name;
            if (!name) mrOption.name = genName();

            // JSX 属性 > core默认值 > 默认属性(globalStatus) > 空值
            mrOption.jsx_status = status || func_status;
            _this4.value[mrOption.name] = mrOption.value = value || _this4.value[name] || null;
            // eslint-disable-next-line
            _this4.status[mrOption.name] = mrOption.status = status || _this4.status[name] || _this4.globalStatus;
            _this4.props[mrOption.name] = mrOption.props = props || {};
            _this4.error[mrOption.name] = mrOption.error = error || null;

            var item = new _item2['default'](_extends({}, mrOption, {
                on: _this4.on.bind(_this4),
                emit: _this4.emit.bind(_this4),
                removeListener: _this4.removeListener.bind(_this4),
                interceptor: _this4.interceptor[mrOption.name],
                form: _this4
            }));

            _this4.childrenMap[item.name] = item;
            _this4.children.push(item);
            return item;
        });
        if (ret.length === 1) {
            return ret[0];
        }
        return ret;
    };

    Form.prototype.updateField = function updateField(props) {
        var _this5 = this;

        if (!Array.isArray(props)) {
            // eslint-disable-next-line
            props = [props];
        }
        props.forEach(function (option) {
            if (!option.name) {
                throw Error('updateField must specify name');
            }
            _this5.childrenMap[option.name].updateField(option);
        });
    };

    Form.prototype.setValidateConfig = function setValidateConfig(config) {
        if (isObject(config)) {
            this.validateConfig = config;
            this.children.forEach(function (child) {
                if (child.name in config) {
                    child.setValidateConfig(config[child.name]);
                }
            });
        }
    };

    return Form;
}();

exports['default'] = Form;
module.exports = exports['default'];