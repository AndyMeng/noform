'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _src = require('../../../../src');

var _src2 = _interopRequireDefault(_src);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

function createActionButton(source) {
    var _class, _temp;

    var Dialog = source.Dialog;


    return _temp = _class = function (_Component) {
        _inherits(ActionButton, _Component);

        function ActionButton(props, context) {
            var _this2 = this;

            _classCallCheck(this, ActionButton);

            var _this = _possibleConstructorReturn(this, _Component.call(this, props, context));

            _this.handleAddInline = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
                return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                _context.next = 2;
                                return _this.doAddInline();

                            case 2:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _callee, _this2);
            }));

            _this.handleUpdateInline = function () {
                _this.doUpdateInline(_this.getIdx());
            };

            _this.handleDelete = function () {
                _this.doDelete(_this.getIdx());
            };

            _this.handleSave = function () {
                _this.doSave(_this.getIdx());
            };

            _this.handleCancel = function () {
                _this.doCancel(_this.getIdx());
            };

            _this.handleAdd = function () {
                var _this$jsxProps = _this.jsxProps,
                    children = _this$jsxProps.children,
                    layout = _this$jsxProps.layout;

                var core = _this.repeaterCore.generateCore();
                Dialog.show({
                    title: '添加',
                    content: _react2['default'].createElement(
                        _src2['default'],
                        { core: core, layout: layout || { label: 8, control: 16 } },
                        children
                    ),
                    onOk: function () {
                        var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(_, hide) {
                            var error;
                            return regeneratorRuntime.wrap(function _callee2$(_context2) {
                                while (1) {
                                    switch (_context2.prev = _context2.next) {
                                        case 0:
                                            _context2.next = 2;
                                            return core.validate();

                                        case 2:
                                            error = _context2.sent;

                                            if (!error) {
                                                _context2.next = 5;
                                                break;
                                            }

                                            return _context2.abrupt('return');

                                        case 5:
                                            _context2.next = 7;
                                            return _this.doAdd(core);

                                        case 7:
                                            hide();

                                        case 8:
                                        case 'end':
                                            return _context2.stop();
                                    }
                                }
                            }, _callee2, _this2);
                        }));

                        return function onOk(_x, _x2) {
                            return _ref2.apply(this, arguments);
                        };
                    }()
                });
            };

            _this.handleUpdate = function () {
                var _this$jsxProps2 = _this.jsxProps,
                    children = _this$jsxProps2.children,
                    layout = _this$jsxProps2.layout;

                Dialog.show({
                    title: '更新',
                    content: _react2['default'].createElement(
                        _src2['default'],
                        { core: _this.getCore(), layout: layout || { label: 8, control: 16 } },
                        children
                    ),
                    onOk: function () {
                        var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(_, hide) {
                            return regeneratorRuntime.wrap(function _callee3$(_context3) {
                                while (1) {
                                    switch (_context3.prev = _context3.next) {
                                        case 0:
                                            _context3.next = 2;
                                            return _this.doUpdate(_this.getCore().getValue(), _this.getIdx());

                                        case 2:
                                            hide();

                                        case 3:
                                        case 'end':
                                            return _context3.stop();
                                    }
                                }
                            }, _callee3, _this2);
                        }));

                        return function onOk(_x3, _x4) {
                            return _ref3.apply(this, arguments);
                        };
                    }()
                });
            };

            _this.renderBtn = function () {
                var _this$props = _this.props,
                    type = _this$props.type,
                    addText = _this$props.addText,
                    updateText = _this$props.updateText,
                    saveText = _this$props.saveText,
                    cancelText = _this$props.cancelText,
                    deleteText = _this$props.deleteText;

                var ele = null;

                switch (type) {
                    case 'add':
                        ele = _react2['default'].createElement(
                            'button',
                            { className: 'repeater-action-btn repeater-add', onClick: _this.handleAdd },
                            addText
                        );break;
                    case 'addInline':
                        ele = _react2['default'].createElement(
                            'button',
                            { className: 'repeater-action-btn repeater-add', onClick: _this.handleAddInline },
                            addText
                        );break;
                    case 'update':
                        ele = _react2['default'].createElement(
                            'button',
                            { className: 'repeater-action-btn repeater-update', onClick: _this.handleUpdate },
                            updateText
                        );break;
                    case 'updateInline':
                        ele = _react2['default'].createElement(
                            'button',
                            { className: 'repeater-action-btn repeater-update', onClick: _this.handleUpdateInline },
                            updateText
                        );break;
                    case 'save':
                        ele = _react2['default'].createElement(
                            'button',
                            { className: 'repeater-action-btn repeater-save', onClick: _this.handleSave },
                            saveText
                        );break;
                    case 'cancel':
                        ele = _react2['default'].createElement(
                            'button',
                            { className: 'repeater-action-btn repeater-cancel', onClick: _this.handleCancel },
                            cancelText
                        );break;
                    case 'remove':
                    case 'delete':
                        ele = _react2['default'].createElement(
                            'button',
                            { className: 'repeater-action-btn repeater-delete', onClick: _this.handleDelete },
                            deleteText
                        );break;
                    default:
                        ele = null;break;
                }

                return ele;
            };

            _this.jsxProps = context.jsxProps;
            _this.repeaterCore = context.repeaterCore;
            _this.doAdd = context.doAdd;
            _this.doUpdate = context.doUpdate;
            _this.doDelete = context.doDelete;
            _this.doSave = context.doSave;
            _this.doCancel = context.doCancel;
            _this.doAddInline = context.doAddInline;
            _this.doUpdateInline = context.doUpdateInline;
            _this.getCore = context.getCore;
            _this.getIdx = context.getIdx;
            return _this;
        }

        ActionButton.prototype.render = function render() {
            return this.renderBtn();
        };

        return ActionButton;
    }(_react.Component), _class.contextTypes = {
        getIdx: _propTypes2['default'].func,
        getCore: _propTypes2['default'].func,
        jsxProps: _propTypes2['default'].object,
        doAdd: _propTypes2['default'].func,
        doUpdate: _propTypes2['default'].func,
        doDelete: _propTypes2['default'].func,
        doSave: _propTypes2['default'].func,
        doCancel: _propTypes2['default'].func,
        doAddInline: _propTypes2['default'].func,
        doUpdateInline: _propTypes2['default'].func,
        repeaterCore: _propTypes2['default'].object
    }, _temp;
}

exports['default'] = createActionButton;
module.exports = exports['default'];