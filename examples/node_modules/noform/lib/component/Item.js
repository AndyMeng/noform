'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _class, _temp;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _static = require('../static');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

var isFunction = function isFunction(func) {
    return typeof func === 'function';
};
var isObject = function isObject(obj) {
    return Object.prototype.toString.call(obj) === '[object Object]';
};
var noop = function noop() {};
var Item = (_temp = _class = function (_Component) {
    _inherits(Item, _Component);

    function Item(jsxProps, context) {
        _classCallCheck(this, Item);

        var _this = _possibleConstructorReturn(this, _Component.call(this, jsxProps, context));

        _this.onChange = function (e) {
            var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
            var _opts$escape = opts.escape,
                escape = _opts$escape === undefined ? false : _opts$escape; // 直接用原生对象不进行判断

            var val = e;
            if (!escape) {
                if (e && e.target) {
                    if ('value' in e.target) {
                        val = e.target.value;
                    } else if ('checked' in e.target) {
                        val = e.target.checked;
                    }
                }

                if (isObject(val)) {
                    var tmpStr = JSON.stringify(val);
                    try {
                        val = JSON.parse(tmpStr);
                    } catch (exception) {
                        val = {};
                    }
                }
            }

            _this.core.set('value', val);
        };

        _this.onBlur = function () {
            _this.core.emit(_static.BLUR, _this.core.name);
            if (typeof _this.props.onBlur === 'function') {
                _this.props.onBlur();
            }
        };

        _this.onFocus = function () {
            _this.core.emit(_static.FOCUS, _this.core.name);
            if (typeof _this.props.onFocus === 'function') {
                _this.props.onFocus();
            }
        };

        _this.bindForm = function (childForm) {
            _this.childForm = childForm;
        };

        _this.update = function () {
            if (_this.didMount) {
                _this.forceUpdate();
            }
        };

        var form = context.form;

        _this.form = form;
        var name = jsxProps.name,
            value = jsxProps.value,
            error = jsxProps.error,
            defaultValue = jsxProps.defaultValue,
            children = jsxProps.children;

        // 构建时提前知道子类，比didmount再来通知，把控性好很多

        _this.displayName = '';
        if (children) {
            if (_react2['default'].isValidElement(children)) {
                var jsxComponent = _react2['default'].Children.only(children);
                if (jsxComponent && jsxComponent.type && jsxComponent.type.displayName) {
                    _this.displayName = jsxComponent.type.displayName;
                }
            }
        }

        _this.predictChildForm = _this.displayName === 'NoForm';

        var option = {
            error: error,
            value: value || defaultValue,
            name: name
        };

        // 上有if item
        if (context.ifCore) {
            option.when = context.ifCore.when;
        } else if ('when' in jsxProps) {
            option.when = jsxProps.when;
        }

        // 处理props
        if ('props' in jsxProps) {
            if (isFunction(jsxProps.props)) {
                option.func_props = jsxProps.props;
                option.props = {};
            } else {
                option.props = jsxProps.props;
            }
        } else {
            option.props = {};
        }

        // 处理status
        if ('status' in jsxProps) {
            if (isFunction(jsxProps.status)) {
                option.func_status = jsxProps.status;
            } else {
                option.status = jsxProps.status;
            }
        }

        // 校验规则
        if ('validateConfig' in jsxProps) {
            if (isFunction(jsxProps.validateConfig)) {
                option.func_validateConfig = jsxProps.validateConfig;
            } else {
                option.validateConfig = jsxProps.validateConfig;
            }
        }

        // 注册item, 绑定视图
        _this.ifCore = context.ifCore;
        _this.core = form.addField(option);
        _this.core.jsx = _this;
        return _this;
    }

    Item.prototype.getChildContext = function getChildContext() {
        // return { item: this, form: this.form, ifCore: null };
        return { item: this, form: this.form, ifCore: this.predictChildForm ? null : this.ifCore };
    };

    Item.prototype.componentDidMount = function componentDidMount() {
        var _this2 = this;

        // 绑定更新函数
        this.core.on(_static.ANY_CHANGE, this.update);
        if (this.childForm) {
            this.form.setValueSilent(this.core.name, this.childForm.getAll('value'));
            this.form.setProps(this.core.name, this.childForm.getAll('props'));
            this.form.setStatus(this.core.name, this.childForm.getAll('status'));
            this.form.setError(this.core.name, this.childForm.getAll('error'));
            this.childForm.on(_static.ANY_CHANGE, function (type) {
                if (type === 'value') {
                    return;
                }
                _this2.form.set(type, _this2.core.name, _this2.childForm.getAll(type));
            });
        }
        this.didMount = true;
        this.forceUpdate();
    };

    Item.prototype.shouldComponentUpdate = function shouldComponentUpdate() {
        return false;
    };

    Item.prototype.componentWillUnmount = function componentWillUnmount() {
        this.core.removeListener(_static.ANY_CHANGE, this.update);
        this.didMount = false;
    };

    Item.prototype.render = function render() {
        if (this.props.render && this.didMount) {
            return this.props.render(this.form.getValue(), this.form);
        } else if (this.props.render) {
            return null;
        }

        if (this.didMount && this.core.get('status') === 'hidden') {
            return null;
        }

        if (typeof this.props.children === 'string') {
            throw new Error('string is not allowed as Item/FormItem\'s children.');
        }

        var name = this.core.name;

        var value = this.form.getItemValue(name);
        var props = this.form.getItemProps(name);
        var error = this.form.getItemError(name);
        var status = this.form.getItemStatus(name);

        var onChange = this.onChange,
            onBlur = this.onBlur,
            onFocus = this.onFocus;

        var _ref = props || {},
            className = _ref.className,
            label = _ref.label,
            top = _ref.top,
            prefix = _ref.prefix,
            suffix = _ref.suffix,
            help = _ref.help,
            validateConfig = _ref.validateConfig,
            full = _ref.full,
            layout = _ref.layout,
            when = _ref.when,
            others = _objectWithoutProperties(_ref, ['className', 'label', 'top', 'prefix', 'suffix', 'help', 'validateConfig', 'full', 'layout', 'when']);

        var component = _react2['default'].Children.only(this.props.children);
        var disabled = false;

        if (status === 'disabled') {
            disabled = true;
        }

        var cloneProps = _extends({
            disabled: disabled, name: name, value: value, error: error, status: status, onChange: onChange, onBlur: onBlur, onFocus: onFocus }, others);

        if (component && component.type && component.type.displayName === 'If') {
            delete cloneProps.name;
        }

        return _react2['default'].cloneElement(component, cloneProps);
    };

    return Item;
}(_react.Component), _class.propTypes = {
    onBlur: _propTypes2['default'].func,
    onFocus: _propTypes2['default'].func,
    children: _propTypes2['default'].any,
    render: _propTypes2['default'].func
}, _class.contextTypes = {
    form: _propTypes2['default'].object,
    ifCore: _propTypes2['default'].object
}, _class.childContextTypes = {
    item: _propTypes2['default'].object,
    form: _propTypes2['default'].object,
    ifCore: _propTypes2['default'].object
}, _class.defaultProps = {
    onBlur: noop,
    onFocus: noop
}, _temp);
Item.displayName = 'Item';


Item.displayName = 'Item';

exports['default'] = Item;
module.exports = exports['default'];